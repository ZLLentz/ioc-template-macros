All of the macro commands in the template files begin with "$$".  These can be:
    $$VAR or $$(VAR)
	- VAR is a variable name that is evaluated and inserted.
    $$DIRNAME
	- A special variable name that is the current directory name.
    $LOOP(INST)
    Body
    $LOOP(INST)
	- INST is the name of an instantiation from the config file.  The
	  macro processor loops over all of the named instantiation, and
	  inserts a copy of the Body with the variable replacements using
	  the parameters of the particular instance.
    $TRANSLATE(VAR, "STR1", "STR2")
	- VAR is a variable name that is evaluated and then has all of the
	  characters in STR1 replaced by the corresponding characters in STR2.

Configuration files are rather fussy, in that whitespace can only appear within
value strings and comments.  If a line starts with '#', it is a comment that runs
until the end of the line.

The configuration file has two types of statements.  Variable assignments have the
forms:
    VAR=VALUE
    VAR="VALUE"
    VAR='VALUE'

All of these define $$VAR to have the value VALUE.

Instantiations have the form:
    INST(PARAMLIST)
where the PARAMLIST is a comma-separated list of entries of the forms:
    VAR=VALUE
    VAR="VALUE"
    VAR='VALUE'
    OTHERINSTn

Instantiations are numbered, with the instantiation number assigned to a
special variable $$INDEX.  The first three types of parameters all create
global symbols of the form $$INSTVARn with value VALUE.  The last form
indicates that this instantiation uses a particular instantiation of
some other instantiation, with n being the number of the other instantiation.

For example, if we have:
    E(X=Y)
    E(X=Z)
    A(B=C,D=F,E0)
    
Then we have defined global symbols $$EX0 = Y, $$EX1 = Z, $$AB0 = C and 
$$AD0 = F.  If we $$LOOP(A), then within the body of the loop, we will
also have $$B = C, $$D = F, and $$EX = Y.
